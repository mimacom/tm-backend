#!/usr/bin/env bash

checkmark="\xe2\x98\x91"
cross="\xe2\x98\x92"

startred='\033[0;31m'
endcolor='\033[0m'
startgreen='\033[0;32m'
CACHE_DIR="terraform.tfstate.d"

echob() {
  echo -e "\033[1m$1\033[0m"
}

echoCheck() {
  echo -e "$startgreen $checkmark $1 $endcolor"
}

echoError() {
  echo -e "$startred $cross $1 $endcolor"
}

check() { # checks is a tool is working
  if ! type "$1" > /dev/null 2>&1; then
    echoError "$2"
    exit 1
  else
    echoCheck "$3"
  fi
}

prepare() {
  check "terraform" "Terraform not installed!" "Terraform available"
  TF_WORKSPACE=${1} terraform init
  TF_WORKSPACE=${1} terraform refresh
}

cache() {
  echob "Caching state outputs"
  ENV=${1}
  mkdir -p ${CACHE_DIR}/${ENV}
  CACHE_FILE=${CACHE_DIR}/${ENV}/.cache
  OUTPUT=`TF_WORKSPACE=${ENV} terraform output`
  echo NOMAD_SERVER_IP=`printf "${OUTPUT}" | awk '/nomad_server_ip/{printf "%s", $3}'` >> ${CACHE_FILE}
  echo BASTION_IP=`printf "${OUTPUT}" | awk '/bastion_ip/{printf "%s", $3}'` >> ${CACHE_FILE}
  echo CIDR=`printf "${OUTPUT}" | awk '/vpc_cidr/{printf "%s", $3}'` >> ${CACHE_FILE}
}

goal_prepare() {
  rm ${CACHE_DIR}/${1}/.cache || true
  prepare "$1"
  cache "$1"
}

goal_dev() {
  exec_nomad dev "$@"
}

goal_prod() {
  exec_nomad prod "$@"
}

goal_deploy() {
  ENV=${1}
  shift
  exec_tf ${ENV} "apply" "$@"
}

goal_destroy() {
  ENV=${1}
  shift
  exec_tf ${ENV} "destroy" "$@"
}

exec_tf() {
  ENV=${1}
  shift
  CMD=${1}
  shift
  TF_WORKSPACE=${ENV} terraform ${CMD} "$@"
}

exec_nomad() {
  ENV=${1}
  shift
  if [[ ! -f ${CACHE_DIR}/${ENV}/.cache ]]; then
    cache ${ENV}
  fi
  source ${CACHE_DIR}/${ENV}/.cache
  if [[ -n "$NOMAD_SERVER_IP" ]]; then
    NOMAD_ADDR="http://${NOMAD_SERVER_IP}:4646" nomad "$@"
  fi
}

goal_shuttle() {
  ENV=${1}
  shift
  if [[ ! -f ${CACHE_DIR}/${ENV}/.cache ]]; then
    cache ${ENV}
  fi
  source ${CACHE_DIR}/${ENV}/.cache
  sshuttle -v -r ${BASTION_IP} ${CIDR} "$@"
}

if type -t "goal_$1" &>/dev/null; then
  goal_$1 ${@:2}
else
  echo "usage: $0 <goal>

goal:
    prepare <env>            -- prepare and cache outputs (also useful when infrastructure changes)
    dev <commands>           -- use nomad on dev
    prod <commands>          -- use nomad on prod
    deploy <env>             -- deploy the services on the selected env
    destroy <env>            -- destroy the services
    shuttle <env>            -- open a sshuttle to the vpc

To connect to the environment run the shuttle task from the tm-infrastructure project.
"
  exit 1
fi
